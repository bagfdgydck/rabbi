const MAX_CHANGES = 3; // ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕рзАржорж╛

module.exports = {
    config: {
        name: "autokick", 
        version: "1.0.1", // ржнрж╛рж░рзНрж╕ржи ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣рж▓рзЛ
        credits: "Gemini", 
        hasPermssion: 1, 
        commandCategory: "Group",
        usages: "autokick status | autokick reset @ржЗржЙржЬрж╛рж░",
        cooldowns: 5
    },

    // ржлрж╛ржЗрж▓ржЯрж┐ рж▓рзЛржб рж╣ржУрзЯрж╛рж░ рж╕ржорзЯ ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржЪрж▓ржмрзЗред
    onLoad: function() {
        // ржпржжрж┐ ржЯрзНрж░рзНржпрж╛ржХрж╛рж░ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржирж╛ ржерж╛ржХрзЗ, рждржмрзЗ рж╕рзЗржЯрж┐ рждрзИрж░рж┐ ржХрж░рж╛ред
        // ржЖржкржирж╛рж░ ржмржЯ ржпржжрж┐ 'global' ржмрж╛ 'global.config' рж╕рж╛ржкрзЛрж░рзНржЯ ржирж╛ ржХрж░рзЗ, рждржмрзБржУ ржПржЯрж┐ ржХрж╛ржЬ ржХрж░ржмрзЗред
        if (typeof global.autoKickTracker === 'undefined') {
            global.autoKickTracker = {};
        }
    },

    // ------------------------------------------------
    // Command Function (ржЖржЧрзЗрж░ ржорждрзЛ)
    // ------------------------------------------------
    run: function ({ api, event, args }) {
        // 'global' ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржлрж╛ржВрж╢ржи ржЖрж░рзНржЧрзБржорзЗржирзНржЯ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯрзЗржЫрзЗ
        let threadID = event.threadID;
        // ржЯрзНрж░рзНржпрж╛ржХрж╛рж░ржЯрж┐ ржПржЦржи рж╕рж░рж╛рж╕рж░рж┐ 'global.autoKickTracker' ржерзЗржХрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╣ржмрзЗ
        let tracker = global.autoKickTracker[threadID]; 

        if (args[0]?.toLowerCase() === "status") {
            if (!tracker || Object.keys(tracker).length === 0) {
                return api.sendMessage("ржПржЗ ржЧрзНрж░рзБржкрзЗ ржПржЦржирзЛ ржХрзЗржЙ ржирж╛ржо ржмрж╛ ржЫржмрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗржирж┐ред", threadID, event.messageID);
            }

            let statusMessage = "ЁЯСд **ржЧрзНрж░рзБржк ржкрж░рж┐ржмрж░рзНрждржи ржЯрзНрж░рзНржпрж╛ржХрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕:**\n";
            for (let userID in tracker) {
                let count = tracker[userID];
                statusMessage += `- ржЗржЙржЬрж╛рж░ ID: ${userID} | ржкрж░рж┐ржмрж░рзНрждржи: ${count} ржмрж╛рж░\n`;
            }
            api.sendMessage(statusMessage, threadID, event.messageID);
            
        } else if (args[0]?.toLowerCase() === "reset") {
             let userIDToReset = Object.keys(event.mentions)[0];

            if (!userIDToReset) {
                 return api.sendMessage("тЪая╕П рж░рж┐рж╕рзЗржЯ ржХрж░рждрзЗ, ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЗржЙржЬрж╛рж░-ржХрзЗ ржЯрзНржпрж╛ржЧ (@) ржХрж░рждрзЗ рж╣ржмрзЗред", threadID, event.messageID);
            }

            if (tracker && tracker[userIDToReset]) {
                delete tracker[userIDToReset];
                api.sendMessage(`тЬЕ ржЗржЙржЬрж╛рж░ ${userIDToReset}-ржПрж░ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╕ржВржЦрзНржпрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред`, threadID, event.messageID);
            } else {
                 api.sendMessage("тЪая╕П ржПржЗ ржЗржЙржЬрж╛рж░-ржПрж░ ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╣рж┐рж╕рзЗржм ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", threadID, event.messageID);
            }

        } else {
            api.sendMessage(
                `ржмрзНржпржмрж╣рж╛рж░:\n` +
                `1. /autokick status: ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╣рж┐рж╕рзЗржм ржжрзЗржЦрзБржиред\n` +
                `2. /autokick reset @ржЗржЙржЬрж╛рж░: ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЗржЙржЬрж╛рж░-ржПрж░ рж╣рж┐рж╕рзЗржм рж░рж┐рж╕рзЗржЯ ржХрж░рзБржиред\n` +
                `ржирзЛржЯ: рждрж┐ржиржмрж╛рж░ ржирж╛ржо/ржЫржмрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж▓рзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЗржЙржЬрж╛рж░-ржХрзЗ ржХрж┐ржХ ржХрж░рж╛ рж╣ржмрзЗред`, 
                threadID, event.messageID
            );
        }
    },

    // ------------------------------------------------
    // Event Handler (ржЖржЧрзЗрж░ ржорждрзЛ)
    // ------------------------------------------------
    Event: async function ({ api, event }) {
        let threadID = event.threadID;
        let authorID = event.author; 

        if (event.logMessageType === "log:threadName" || event.logMessageType === "log:threadImage") {
            if (authorID === api.getCurrentUserID()) return;

            // ржЯрзНрж░рзНржпрж╛ржХрж╛рж░ржЯрж┐ рж╕рж░рж╛рж╕рж░рж┐ 'global.autoKickTracker' ржерзЗржХрзЗ ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
            if (!global.autoKickTracker[threadID]) {
                global.autoKickTracker[threadID] = {};
            }

            let tracker = global.autoKickTracker[threadID];
            
            // ... (ржмрж╛ржХрж┐ ржХрж┐ржХ ржХрж░рж╛рж░ рж▓ржЬрж┐ржХ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ...
            tracker[authorID] = (tracker[authorID] || 0) + 1;
            let currentCount = tracker[authorID];

            if (currentCount >= MAX_CHANGES) {
                try {
                    let userInfo = await api.getUserInfo(authorID);
                    let userName = userInfo[authorID].name || "ржПржЗ ржЗржЙржЬрж╛рж░";

                    await api.removeUserFromGroup(authorID, threadID);

                    api.sendMessage(
                        `ЁЯЪл ржХрж┐ржХ ржЕрзНржпрж╛ржХрж╢ржи: ${userName} (${authorID}) ржЧрзНрж░рзБржкрзЗрж░ рж╕рзЗржЯрж┐ржВ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░ рж╕рзАржорж╛ (${MAX_CHANGES} ржмрж╛рж░) ржЕрждрж┐ржХрзНрж░ржо ржХрж░рзЗржЫрзЗред рждрж╛ржЗ рждрж╛ржХрзЗ рж░рж┐ржорзБржн ржХрж░рж╛ рж╣рж▓рзЛред`, 
                        threadID
                    );

                    delete tracker[authorID];

                } catch (e) {
                    api.sendMessage(
                        `тЭМ ржХрж┐ржХ ржмрзНржпрж░рзНрже: ${authorID} рж╕рзАржорж╛ ржЕрждрж┐ржХрзНрж░ржо ржХрж░рзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ ржмржЯ рждрж╛ржХрзЗ рж░рж┐ржорзБржн ржХрж░рждрзЗ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред (рж╕ржорзНржнржмржд ржмржЯрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи ржкрж╛рж░ржорж┐рж╢ржи ржирзЗржЗ)`, 
                        threadID
                    );
                    console.error("AutoKick Failed:", e);
                }
            } else {
                let remaining = MAX_CHANGES - currentCount;
                api.sendMessage(
                    `тЪая╕П рж╕рждрж░рзНржХрждрж╛: ржЖржкржирж┐ ${currentCount} ржмрж╛рж░ ржЧрзНрж░рзБржкрзЗрж░ рж╕рзЗржЯрж┐ржВ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗржЫрзЗржиред ржЖрж░ ${remaining} ржмрж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржЧрзНрж░рзБржк ржерзЗржХрзЗ рж░рж┐ржорзБржн ржХрж░рж╛ рж╣ржмрзЗред`, 
                    threadID
                );
            }
        }
    }
};
