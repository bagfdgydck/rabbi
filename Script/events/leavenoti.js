const fs = require("fs-extra");
const path = require("path");

module.exports.config = {
  name: "leave_add", // ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
  eventType: ["log:unsubscribe", "log:subscribe"], // ‡¶è‡¶ñ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ì ‡¶≤‡¶ø‡¶≠ ‡¶¶‡ßÅ‡¶ü‡ßã ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶á ‡¶ß‡¶∞‡¶¨‡ßá
  version: "4.0.0", // ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
  credits: "ùêëùêÄùêÅùêÅi‚çüùêïùêÄi | Modified by Akash",
  description: "Add/Leave/Kick message system with gif/video/image"
};

module.exports.onLoad = function () {
  const folders = [
    path.join(__dirname, "cache", "leaveGif"),
    path.join(__dirname, "cache", "kickGif"),
    path.join(__dirname, "cache", "addGif") // ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® GIF ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
  ];
  for (const folder of folders) {
    if (!fs.existsSync(folder)) fs.mkdirSync(folder, { recursive: true });
  }
};

module.exports.run = async function ({ api, event, Users, Threads }) {
  try {
    const { threadID } = event;

    // --- ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶π‡¶≤‡ßá (Welcome) ---
    if (event.logMessageType == "log:subscribe") {
      const addedIDs = event.logMessageData.addedParticipants;
      const threadData = global.data.threadData.get(parseInt(threadID)) || (await Threads.getData(threadID)).data;

      // ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡¶æ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶ó‡¶®‡ßã‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá
      if (addedIDs.some(i => i.userFbId == api.getCurrentUserID())) return;

      const addedNames = [];
      for (const participant of addedIDs) {
        const userName = global.data.userName.get(participant.userFbId) || await Users.getNameUser(participant.userFbId);
        addedNames.push(userName);
      }
      
      const namesString = addedNames.join(", ");
      
      // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü Welcome ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
      let msg = (typeof threadData.customWelcome == "undefined")
        ? `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéâ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, {name}!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡•§ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßá‡¶®‡ßá ‡¶ö‡¶≤‡ßã, ‡¶Æ‡¶ú‡¶æ ‡¶ï‡¶∞‡ßã!
‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄÍØ≠‚îÄ‚Éù‚Äå‚Äå‚òûÔ∏éÔ∏éÔ∏éùêëùêÄùêÅùêÅi‚çüùêïùêÄi‚òúÔ∏éÔ∏éùêÇùê°ùêöùê≠ ùêÅùê®ùê≠‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶`
        : threadData.customWelcome;

      msg = msg.replace(/\{name}/g, namesString);

      const addPath = path.join(__dirname, "cache", "addGif");
      const fileList = fs.readdirSync(addPath).filter(file =>
        [".mp4", ".gif", ".jpg", ".png", ".jpeg", ".mp3"].some(ext => file.endsWith(ext))
      );
      
      // ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã
      const selectedFile = fileList.length > 0
        ? path.join(addPath, fileList[Math.floor(Math.random() * fileList.length)])
        : null;

      let attachment = null;
      if (selectedFile && fs.existsSync(selectedFile)) {
        attachment = fs.createReadStream(selectedFile);
      }

      return api.sendMessage(
        attachment ? { body: msg, attachment } : { body: msg },
        threadID
      );
    }

    // --- ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶¨‡¶æ ‡¶ï‡¶ø‡¶ï ‡¶π‡¶≤‡ßá (Leave/Kick) ---
    else if (event.logMessageType == "log:unsubscribe") {
      const leftID = event.logMessageData?.leftParticipantFbId;

      if (!leftID) return;
      if (leftID == api.getCurrentUserID()) return; // ‡¶¨‡¶ü ‡¶®‡¶ø‡¶ú‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá

      const threadData = global.data.threadData.get(parseInt(threadID)) || (await Threads.getData(threadID)).data;
      const userName = global.data.userName.get(leftID) || await Users.getNameUser(leftID);

      const isLeave = (event.author == leftID);
      const typeText = isLeave
        ? "‡¶§‡ßÅ‡¶á ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ø‡¶≠ ‡¶®‡¶ø‡¶≤‡¶ø üò§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶∏‡¶ø‡¶∏ ‡¶®‡¶æ! üö´"
        : "‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶æ‡¶•‡¶ø ‡¶Æ‡ßá‡¶∞‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã ü§£üö™";

      let msg = (typeof threadData.customLeave == "undefined")
        ? `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üò¢ {name} {type}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‡¶≠‡¶æ‡¶≤‡ßã ‡¶•‡¶æ‡¶ï‡¶ø‡¶∏... ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Æ‡¶ú‡¶æ ‡¶Æ‡¶ø‡¶∏ ‡¶ï‡¶∞‡¶¨‡¶ø üòâ
‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄÍØ≠‚îÄ‚Éù‚Äå‚Äå‚òûÔ∏éÔ∏éÔ∏éùêëùêÄùêÅùêÅi‚çüùêïùêÄi‚òúÔ∏éÔ∏éùêÇùê°ùêöùê≠ ùêÅùê®ùê≠‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶`
        : threadData.customLeave;

      msg = msg.replace(/\{name}/g, userName).replace(/\{type}/g, typeText);

      // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶• ‡¶ö‡ßá‡¶ï (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì/‡¶ú‡¶ø‡¶Ü‡¶á‡¶è‡¶´/‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶¨ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü)
      const leavePath = path.join(__dirname, "cache", "leaveGif");
      const kickPath = path.join(__dirname, "cache", "kickGif");

      // ‡¶≤‡¶ø‡¶≠ ‡¶®‡¶æ‡¶ï‡¶ø ‡¶ï‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶æ‡¶ì
      const folderPath = isLeave ? leavePath : kickPath;
      const fileList = fs.readdirSync(folderPath).filter(file =>
        [".mp4", ".gif", ".jpg", ".png", ".jpeg", ".mp3"].some(ext => file.endsWith(ext))
      );

      // ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
      const selectedFile = fileList.length > 0
        ? path.join(folderPath, fileList[Math.floor(Math.random() * fileList.length)])
        : null;

      let attachment = null;
      if (selectedFile && fs.existsSync(selectedFile)) {
        attachment = fs.createReadStream(selectedFile);
      }

      return api.sendMessage(
        attachment ? { body: msg, attachment } : { body: msg },
        threadID
      );
    }

  } catch (err) {
    console.error("‚ùå Event Error:", err);
  }
};
