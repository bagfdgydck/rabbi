Const fs = require("fs-extra");
const axios = require("axios");

module.exports.config = {
  name: "antiProtect",
  version: "1.2.0", // ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
  hasPermssion: 0,
  credits: "RABBI ISLAM + Kawsar-Chowdhury-Official", // ‡¶ï‡ßç‡¶∞‡ßá‡¶°‡¶ø‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
  description: "Protects group name, photo and nicknames",
  eventType: ["log:thread-name", "log:thread-icon", "log:user-nickname"],
  cooldowns: 3
};

module.exports.run = async function({ api, event, Threads, Users }) {
  try {
    const threadID = event.threadID;
    const senderID = event.senderID; // event.author ‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡ßá event.senderID ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
    const cacheDir = `${__dirname}/../../cache/antiProtect/`;
    if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir, { recursive: true });
    
    // --- ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ---
    const settingsFile = `${cacheDir}settings.json`;
    let settings = {};
    if (fs.existsSync(settingsFile)) {
      try { 
        settings = JSON.parse(fs.readFileSync(settingsFile, 'utf-8')); 
      } catch (e) {
        console.error("Failed to parse settings.json:", e);
      }
    }
    // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏‡ßá ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡ßá‡¶ï‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶•‡¶æ‡¶ï‡ßá (false), ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã
    if (settings[threadID] === false) return; 

    // --- ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ---
    const threadInfo = await api.getThreadInfo(threadID);
    const adminIDs = (threadInfo.adminIDs || []).map(u => u.id);
    const botOwners = ["100001039692046"]; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø
    const isAdmin = adminIDs.includes(senderID) || botOwners.includes(senderID);
    
    const cacheFile = `${cacheDir}${threadID}.json`;
    let oldData = null;
    let newSnapshot = null;

    // --- ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶®‡ßç‡¶Ø‡¶æ‡¶™‡¶∂‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ/‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ---
    if (fs.existsSync(cacheFile)) {
        try {
            oldData = JSON.parse(fs.readFileSync(cacheFile, 'utf-8'));
        } catch (e) {
            console.error("Failed to parse cache file:", e);
        }
    }

    const currentSnapshot = {
        name: threadInfo.threadName || "Unnamed Group",
        imageSrc: threadInfo.imageSrc || null,
        nicknames: threadInfo.nicknames || {}
    };

    if (!oldData) {
        // ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶®‡ßç‡¶Ø‡¶æ‡¶™‡¶∂‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
        fs.writeFileSync(cacheFile, JSON.stringify(currentSnapshot, null, 2));
        return;
    }

    if (isAdmin) {
      // ‡¶Ø‡¶¶‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶è‡¶ï‡¶ú‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
      fs.writeFileSync(cacheFile, JSON.stringify(currentSnapshot, null, 2));
      return;
    }

    // --- ‡¶®‡¶®-‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶æ ‡¶≤‡¶ú‡¶ø‡¶ï ---
    const userName = await Users.getNameUser(senderID).catch(() => "Someone");
    const botID = api.getCurrentUserID();
    const botIsAdmin = adminIDs.includes(botID);

    switch (event.logMessageType) {
      case "log:thread-name": {
        await api.setTitle(oldData.name, threadID).catch((e) => {
             console.error("Error reverting group name:", e);
        });
        return api.sendMessage(`üö´ ${userName} tried to change the group name!\nName reverted ‚Üí "${oldData.name}" ‚úÖ`, threadID);
      }
      
      case "log:thread-icon": {
        if (!botIsAdmin) {
           return api.sendMessage("‚ö†Ô∏è I need to be a group admin to restore the group photo.", threadID);
        }
        try {
          if (oldData.imageSrc) {
            const res = await axios.get(oldData.imageSrc, { responseType: "arraybuffer" });
            const buffer = Buffer.from(res.data, "binary");
            await api.changeGroupImage(buffer, threadID);
          } else {
            // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶õ‡¶¨‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡¶æ‡¶ì (‡¶Ø‡¶¶‡¶ø API ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶ï‡¶∞‡ßá)
            await api.changeGroupImage(null, threadID).catch(() => {}); 
          }
        } catch (e) {
             console.error("Error reverting group image:", e);
        }
        return api.sendMessage(`üö´ ${userName} tried to change the group photo!\nPrevious photo restored ‚úÖ`, threadID);
      }
      
      case "log:user-nickname": {
        const data = event.logMessageData || {};
        // ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ID ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶æ‡¶ï‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá)
        const userID = data.participant_id || data.user_id || data.target_id || (data?.changed && data.changed[0].participant_id) || null;
        
        if (!userID) return;
        
        if (!botIsAdmin) {
          try { await api.sendMessage("‚ö†Ô∏è I need to be a group admin to restore nicknames.", threadID); } catch {}
          return;
        }
        
        // oldData.nicknames[userID] ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶ï‡¶®‡ßá‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        const oldNick = (oldData.nicknames && oldData.nicknames[userID] !== undefined ? oldData.nicknames[userID] : "") || "";
        
        // ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ü‡¶æ ‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶ï‡¶®‡ßá‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ, ‡¶Ø‡¶æ‡¶§‡ßá API ‡¶ï‡¶≤ ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü
        setTimeout(async () => { 
            try { 
                await api.changeNickname(oldNick, threadID, userID); 
                api.sendMessage(`üö´ ${userName} tried to change a nickname!\nNickname for ${await Users.getNameUser(userID).catch(() => "a user")} has been reverted ‚úÖ`, threadID);
            } catch (e) {
                console.error("Error reverting nickname:", e);
            } 
        }, 1000); // ‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡ßß‡ß¶‡ß¶‡ß¶ ms ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
        
        return; // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡¶ü‡¶ø setTimeout ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶§‡¶æ‡¶á ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
      }
      
      default:
        return;
    }
  } catch (error) {
    console.error("AntiProtect Global Error:", error);
    // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ö‡¶æ‡¶® ‡¶Ø‡ßá ‡¶è‡¶∞‡¶∞‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡ßã‡¶ï, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ü‡¶®‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§
    // try { api.sendMessage(`An internal error occurred in AntiProtect: ${error.message}`, event.threadID); } catch {}
  }
};
